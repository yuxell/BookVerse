@using BookWebApp.Models.ViewModels;
@model IEnumerable<BookCard_VM>

@{
    ViewData["Title"] = "Home Page";
}





<section class="hero">
    <div class="container">
        <h1 class="hero-title">Discover Your Next Great Read</h1>
        <p class="hero-subtitle">Explore our vast collection of books, from timeless classics to contemporary bestsellers.</p>
        <div class="hero-buttons">
            <button onclick="window.location.href='/Book/'" class="btn-primary">Browse Books</button>
            <button onclick="window.location.href='/AboutUs'" class="btn-secondary">Learn More</button>
        </div>
        <div class="stats">
            <div class="stat-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"></path><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"></path></svg>
                <h3 id="bookCount">Yükleniyor...+ Books</h3>
                <p>In our library</p>
            </div>
            <div class="stat-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M22 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
                <h3>50,000+ Readers</h3>
                <p>Active monthly</p>
            </div>
            <div class="stat-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon></svg>
                <h3>Over 1 Milion+ Rating</h3>
                <p>From our users</p>
            </div>
        </div>
    </div>
</section>

<section class="books">
    <div class="container">
        <h2 class="section-title">Featured Books</h2>
        <div class="book-grid" id="bookGrid">
            @foreach (var item in Model)
            {
                <div class="book-card fade-in">
                    <img src="/img/books/@item.CoverImage" alt="@item.Title" class="book-cover" onclick="window.location.href='/book/bookdetail/@item.BookID'" >
                    <div class="book-content">
                        <div class="book-header">
                            <span class="book-genre"><a href="/book/category/@item.CategoryID">@item.CategoriName</a></span>
                            <div class="book-rating">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="star-icon"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon></svg>
                                <span>@item.AvarageRating.ToString("0.0")</span>
                            </div>
                        </div>
                        <h3 class="book-title"><a href="/book/bookdetail/@item.BookID">@item.Title</a></h3>
                        <p class="book-author"><a href="/book/author/@item.AuthorID" >by @item.AuthorFullName</a></p>
                        <p class="book-description">
                            @(new string(item.Description.Take(60).ToArray()) + (item.Description.Length > 60 ? "..." : ""))</p>
                        <button class="btn-primary" onclick="window.location.href='/book/bookdetail/@item.BookID'">Read More</button>
                    </div>
                </div>
            }
        </div>
    </div>
</section>



<section class="comments-section">
    <div class="container">
        <h2 class="section-title">Latest Comments</h2>
        <div class="comments-container">
            <div class="comments-slider" id="commentsSlider">
                <!-- Comments will be inserted here by JavaScript -->
            </div>
            <div class="slider-buttons">
                <button class="slider-button" onclick="prevButtonClicked()" id="prevButton" disabled>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6" /></svg>
                </button>
                <button class="slider-button" onclick="nextButtonClicked()" id="nextButton">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6" /></svg>
                </button>
            </div>
        </div>
    </div>
</section>


<section class="community-section">
    <div class="container">
        <div class="purple-content">
            <h2>Join Our Community</h2>
            <p>Get exclusive access to new releases, author interviews, and special events.</p>
            <form class="subscribe-form">
                <input type="email" placeholder="Enter your email" required>
                <button type="submit" class="btn-white">Subscribe Now</button>
            </form>
            <div class="features-grid">
                <div class="feature-item">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20"></path></svg>
                    <h3>Early Access</h3>
                    <p>Be the first to read upcoming releases</p>
                </div>
                <div class="feature-item">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><path d="M12 17h.01"></path></svg>
                    <h3>Expert Reviews</h3>
                    <p>Get detailed insights from our community</p>
                </div>
                <div class="feature-item">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
                    <h3>Free Downloads</h3>
                    <p>Access exclusive book previews</p>
                </div>
            </div>
        </div>
    </div>
</section>

<div id="bookList"></div>

<script>
// Kaç kitap kayıtlı getiren fonksiyon
async function fetchBookCount() {
    try {
            const response = await fetch("home/GetBookCount");
            const count = await response.json(); // JSON olarak cevabı al
            document.getElementById("bookCount").textContent = count + "+ Books"; // HTML içine ekle
        } catch (error) {
            console.log("Kitap sayısı alınamadı:");}
}

fetchBookCount();



    // Comments slider functionality
    let currentSlide = 0;
    const commentsSlider = document.getElementById('commentsSlider');
    const prevButton = document.getElementById('prevButton');
    const nextButton = document.getElementById('nextButton');
    let totalReviews = 0;
    //function renderComments() {




    // Son yapılan yorumlar
    async function getRecentReviewsAsync(reviewCount) {
        const response = await fetch(`/review/RecentReviews/?takeCount=${reviewCount}`); // İlgili API endpoint'iniz
        let result = await response.json();
        totalReviews = reviewCount;

        commentsSlider.innerHTML = result.map(review => {
            const stars = '★'.repeat(Math.floor(review.rating)) +
                (review.rating % 1 ? '½' : '') +
                '☆'.repeat(5 - Math.ceil(review.rating));

            return `<div class="comment-card">
                <div class="comment-book">
                    <img onclick="alert(${review.BookID})" src="/img/books/${review.CoverImage}" alt="${review.BookTitle}">
                </div>
                <div class="comment-content">
                    <div class="comment-header">
                        <span class="comment-author">${review.UserName}</span>
                        <div class="comment-rating">
                            <span style="color: #fbbf24">${stars}</span>
                        </div>
                    </div>
                    <p class="comment-text">${review.Comment}</p>
                    <div class="comment-date">${review.CreatedAt}</div>
                </div>
            </div>`
        }).join('');

        updateSlider();
    }

    function updateSlider() {
      const slideWidth = document.querySelector('.comment-card').offsetWidth + 32;
      commentsSlider.style.transform = `translateX(-${currentSlide * slideWidth}px)`;

      prevButton.disabled = currentSlide === 0;
        nextButton.disabled = currentSlide >= totalReviews - getVisibleSlides();
    }

    function getVisibleSlides() {
      if (window.innerWidth >= 1024) return 3;
      if (window.innerWidth >= 768) return 2;
      return 1;
    }

    function prevButtonClicked(){
      if (currentSlide > 0) {
        currentSlide--;
        updateSlider();
      }
    };

    function nextButtonClicked() {
        if (currentSlide < totalReviews - getVisibleSlides()) {
        currentSlide++;
        updateSlider();
      }
    };

    window.addEventListener('resize', () => {
      currentSlide = 0;
      updateSlider();
    });



    // Initialize the page
    document.addEventListener('DOMContentLoaded', () => {

        getRecentReviewsAsync(10);
    });

</script>

<script src="~/js/book.js"></script>