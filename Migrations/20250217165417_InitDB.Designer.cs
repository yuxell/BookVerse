// <auto-generated />
using System;
using BookWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookWebApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250217165417_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookWebApp.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "efc6ace5-56c0-4c90-9e30-bf2b50119c00",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "cf05203e-37af-42f6-b7fa-05536a2b770b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("BookWebApp.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("varchar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Kadıköy",
                            ConcurrencyStamp = "dea1b1c0-6adf-462e-b687-62e700baa0e5",
                            Email = "admin@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN@TEST.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECFksvZ31UrBKqlK+orPcRSvk4J1RaTh22PqmUP8VHfagqPIc3j6nUYECR0IsTmNAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9376a79-c197-4c8e-be91-85ef855a6d3f",
                            Surname = "Context",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("BookWebApp.Models.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"));

                    b.Property<string>("AuthorDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<string>("AuthorSurname")
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorID = 1,
                            AuthorDescription = "He was an American Baptist minister, activist, and political philosopher who was one of the leading figures of the civil rights movement from 1955 until his assassination in 1968.",
                            AuthorName = "Martin Luther",
                            AuthorSurname = "King"
                        },
                        new
                        {
                            AuthorID = 2,
                            AuthorDescription = "He was an Austro-Hungarian novelist, playwright, biographer, and journalist. At the peak of his literary career in the 1920s and 1930s, Zweig was one of the most translated and popular authors of his time.",
                            AuthorName = "Stefan",
                            AuthorSurname = "Zweig"
                        });
                });

            modelBuilder.Entity("BookWebApp.Models.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<int?>("AuthorID")
                        .HasColumnType("int");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CoverImage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasDefaultValue("default-book.png");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("BookID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookWebApp.Models.BookPublisher", b =>
                {
                    b.Property<int>("BookPublisherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookPublisherID"));

                    b.Property<int?>("BookID")
                        .HasColumnType("int");

                    b.Property<int?>("PublisherID")
                        .HasColumnType("int");

                    b.HasKey("BookPublisherID");

                    b.HasIndex("BookID");

                    b.HasIndex("PublisherID");

                    b.ToTable("BookPublishers");
                });

            modelBuilder.Entity("BookWebApp.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Roman"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Hikâye (Öykü)"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Bilim Kurgu"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Fantastik"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Korku"
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "Gerilim / Polisiye"
                        },
                        new
                        {
                            CategoryID = 7,
                            CategoryName = "Macera"
                        },
                        new
                        {
                            CategoryID = 8,
                            CategoryName = "Tarihi Kurgu"
                        },
                        new
                        {
                            CategoryID = 9,
                            CategoryName = "Distopya"
                        },
                        new
                        {
                            CategoryID = 10,
                            CategoryName = "Gotik Kurgu"
                        },
                        new
                        {
                            CategoryID = 11,
                            CategoryName = "Psikolojik Kurgu"
                        },
                        new
                        {
                            CategoryID = 12,
                            CategoryName = "Dram"
                        },
                        new
                        {
                            CategoryID = 13,
                            CategoryName = "Biyografi / Otobiyografi"
                        },
                        new
                        {
                            CategoryID = 14,
                            CategoryName = "Anı (Hatıra)"
                        },
                        new
                        {
                            CategoryID = 15,
                            CategoryName = "Tarih"
                        },
                        new
                        {
                            CategoryID = 16,
                            CategoryName = "Bilim"
                        },
                        new
                        {
                            CategoryID = 17,
                            CategoryName = "Felsefe"
                        },
                        new
                        {
                            CategoryID = 18,
                            CategoryName = "Din"
                        },
                        new
                        {
                            CategoryID = 19,
                            CategoryName = "Psikoloji"
                        },
                        new
                        {
                            CategoryID = 20,
                            CategoryName = "Sosyoloji"
                        },
                        new
                        {
                            CategoryID = 21,
                            CategoryName = "Kişisel Gelişim"
                        },
                        new
                        {
                            CategoryID = 22,
                            CategoryName = "İş Dünyası / Ekonomi"
                        },
                        new
                        {
                            CategoryID = 23,
                            CategoryName = "Politika"
                        },
                        new
                        {
                            CategoryID = 24,
                            CategoryName = "Sanat"
                        },
                        new
                        {
                            CategoryID = 25,
                            CategoryName = "Gezi"
                        },
                        new
                        {
                            CategoryID = 26,
                            CategoryName = "Yemek / Gastronomi"
                        },
                        new
                        {
                            CategoryID = 27,
                            CategoryName = "Çocuk Kitapları"
                        },
                        new
                        {
                            CategoryID = 28,
                            CategoryName = "Gençlik Kitapları"
                        },
                        new
                        {
                            CategoryID = 29,
                            CategoryName = "Eğitici Kitaplar"
                        },
                        new
                        {
                            CategoryID = 30,
                            CategoryName = "Ders Kitapları"
                        },
                        new
                        {
                            CategoryID = 31,
                            CategoryName = "Mühendislik"
                        },
                        new
                        {
                            CategoryID = 32,
                            CategoryName = "Tıp"
                        },
                        new
                        {
                            CategoryID = 33,
                            CategoryName = "Hukuk"
                        },
                        new
                        {
                            CategoryID = 34,
                            CategoryName = "Edebiyat"
                        },
                        new
                        {
                            CategoryID = 35,
                            CategoryName = "Dil Öğrenme"
                        },
                        new
                        {
                            CategoryID = 36,
                            CategoryName = "Çizgi Roman"
                        },
                        new
                        {
                            CategoryID = 37,
                            CategoryName = "Manga"
                        },
                        new
                        {
                            CategoryID = 38,
                            CategoryName = "Mizah"
                        });
                });

            modelBuilder.Entity("BookWebApp.Models.FavoriteBook", b =>
                {
                    b.Property<int>("FavoriteBookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteBookID"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FavoriteBookID");

                    b.HasIndex("BookID");

                    b.HasIndex("UserID", "BookID")
                        .IsUnique();

                    b.ToTable("FavoriteBooks");
                });

            modelBuilder.Entity("BookWebApp.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherID"));

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar");

                    b.HasKey("PublisherID");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherID = 1,
                            PublisherName = "Can Yayınları"
                        },
                        new
                        {
                            PublisherID = 2,
                            PublisherName = "İş Bankası Yayınları"
                        },
                        new
                        {
                            PublisherID = 3,
                            PublisherName = "Domingo Yayınları"
                        },
                        new
                        {
                            PublisherID = 4,
                            PublisherName = "İthaki Yayınları"
                        });
                });

            modelBuilder.Entity("BookWebApp.Models.Review", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<short>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("BookID");

                    b.HasIndex("UserID");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookWebApp.Models.Book", b =>
                {
                    b.HasOne("BookWebApp.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID");

                    b.HasOne("BookWebApp.Models.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryID");

                    b.HasOne("BookWebApp.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookWebApp.Models.BookPublisher", b =>
                {
                    b.HasOne("BookWebApp.Models.Book", "Book")
                        .WithMany("BookPublishers")
                        .HasForeignKey("BookID");

                    b.HasOne("BookWebApp.Models.Publisher", "Publisher")
                        .WithMany("BookPublishers")
                        .HasForeignKey("PublisherID");

                    b.Navigation("Book");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BookWebApp.Models.FavoriteBook", b =>
                {
                    b.HasOne("BookWebApp.Models.Book", "Book")
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWebApp.Models.AppUser", "User")
                        .WithMany("FavoriteBooks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookWebApp.Models.Review", b =>
                {
                    b.HasOne("BookWebApp.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWebApp.Models.AppUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BookWebApp.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BookWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BookWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BookWebApp.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BookWebApp.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookWebApp.Models.AppUser", b =>
                {
                    b.Navigation("FavoriteBooks");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookWebApp.Models.Book", b =>
                {
                    b.Navigation("BookPublishers");

                    b.Navigation("FavoriteBooks");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookWebApp.Models.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookWebApp.Models.Publisher", b =>
                {
                    b.Navigation("BookPublishers");
                });
#pragma warning restore 612, 618
        }
    }
}
